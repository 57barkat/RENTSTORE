import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  ActivityIndicator,
} from "react-native";
import { useTheme } from "@/contextStore/ThemeContext";
import LocationPicker from "@/utils/LocationPicker";
import * as ImagePicker from "expo-image-picker";
import { propertyValidationSchema } from "@/utils/propertyValidator";
import { Colors } from "@/constants/Colors";
import { MaterialCommunityIcons } from "@expo/vector-icons";
import { styles } from "@/styles/propertyFormComponent";

const Section = ({ title, children, style }: any) => {
  const { theme } = useTheme();
  const currentTheme = Colors[theme ?? "light"];
  return (
    <View
      style={[
        styles.sectionContainer,
        { backgroundColor: currentTheme.card },
        style,
      ]}
    >
      <Text style={[styles.sectionTitle, { color: currentTheme.secondary }]}>
        {title}
      </Text>
      {children}
    </View>
  );
};

const FormInput = ({
  label,
  placeholder,
  value,
  onChangeText,
  keyboardType = "default",
  error,
  multiline = false,
  theme,
}: any) => (
  <View style={styles.inputGroup}>
    <Text style={[styles.label, { color: theme.secondary }]}>{label}</Text>
    <TextInput
      style={[
        styles.input,
        {
          borderColor: error ? "red" : theme.border,
          color: theme.text,
          backgroundColor: theme.card,
        },
        multiline && styles.textarea,
      ]}
      placeholder={placeholder}
      placeholderTextColor={theme.muted}
      value={value}
      onChangeText={onChangeText}
      keyboardType={keyboardType}
      multiline={multiline}
    />
    {error && <Text style={styles.errorText}>{error}</Text>}
  </View>
);

export default function PropertyForm({
  formData,
  onChange,
}: {
  formData: any;
  onChange: (key: string, value: any) => void;
}) {
  const { theme } = useTheme();
  const currentTheme = Colors[theme ?? "light"];
  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const [mediaLoading, setMediaLoading] = useState<"photo" | "video" | null>(
    null
  );
  const [locationLoading, setLocationLoading] = useState(false);

  const pickMedia = async (type: "photo" | "video") => {
    setMediaLoading(type);
    try {
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes:
          type === "photo"
            ? ImagePicker.MediaTypeOptions.Images
            : ImagePicker.MediaTypeOptions.Videos,
        allowsMultipleSelection: true,
        quality: 1,
      });
      if (!result.canceled && result.assets) {
        const files = result.assets.map((asset) => ({
          uri: asset.uri,
          type: asset.type === "image" ? "image/jpeg" : "video/mp4",
          name: asset.fileName || `${type}-${Date.now()}`,
        }));
        if (type === "photo") {
          onChange("images", [...(formData.images || []), ...files]);
        } else {
          onChange("videos", [...(formData.videos || []), ...files]);
        }
      }
    } finally {
      setMediaLoading(null);
    }
  };

  const handleChange = async (key: string, value: any) => {
    const numericFields = [
      "bedrooms",
      "bathrooms",
      "kitchens",
      "livingRooms",
      "balconies",
      "floor",
      "area",
      "rentPrice",
      "securityDeposit",
      "maintenanceCharges",
      "latitude",
      "longitude",
    ];
    const booleanFields = ["furnished", "utilitiesIncluded", "petsAllowed"];
    let parsedValue = value;

    if (numericFields.includes(key)) parsedValue = Number(value) || 0;
    else if (booleanFields.includes(key)) parsedValue = Boolean(value);

    onChange(key, parsedValue);

    try {
      await propertyValidationSchema.validate(
        { ...formData, [key]: parsedValue },
        { abortEarly: false }
      );
      setErrors({});
    } catch (err: any) {
      const fieldErrors: { [key: string]: string } = {};
      if (err.inner) {
        err.inner.forEach((e: any) => {
          if (e.path) fieldErrors[e.path] = e.message;
        });
      }
      setErrors(fieldErrors);
    }
  };

  return (
    <View style={styles.container}>
      <Section title="Basic Information">
        <FormInput
          label="Property Type"
          placeholder="House, Apartment..."
          value={formData.propertyType}
          onChangeText={(val: string) => handleChange("propertyType", val)}
          error={errors.propertyType}
          theme={currentTheme}
        />
        <FormInput
          label="Title"
          placeholder="A catchy title for your property"
          value={formData.title}
          onChangeText={(val: string) => handleChange("title", val)}
          error={errors.title}
          theme={currentTheme}
        />
        <FormInput
          label="City"
          placeholder="e.g., New York"
          value={formData.city}
          onChangeText={(val: string) => handleChange("city", val)}
          error={errors.city}
          theme={currentTheme}
        />
        <FormInput
          label="Description"
          placeholder="Describe your property in detail"
          value={formData.description}
          onChangeText={(val: string) => handleChange("description", val)}
          multiline
          theme={currentTheme}
        />
      </Section>

      <Section title="Property Details">
        <View style={styles.twoColumnContainer}>
          <FormInput
            label="Bedrooms"
            value={formData.bedrooms?.toString() || ""}
            onChangeText={(val: string) => handleChange("bedrooms", val)}
            keyboardType="numeric"
            theme={currentTheme}
          />
          <FormInput
            label="Bathrooms"
            value={formData.bathrooms?.toString() || ""}
            onChangeText={(val: string) => handleChange("bathrooms", val)}
            keyboardType="numeric"
            theme={currentTheme}
          />
        </View>
        <View style={styles.twoColumnContainer}>
          <FormInput
            label="Area (sq ft)"
            value={formData.area?.toString() || ""}
            onChangeText={(val: string) => handleChange("area", val)}
            keyboardType="numeric"
            theme={currentTheme}
          />
          <FormInput
            label="Floor"
            value={formData.floor?.toString() || ""}
            onChangeText={(val: string) => handleChange("floor", val)}
            keyboardType="numeric"
            theme={currentTheme}
          />
        </View>
        <View style={styles.twoColumnContainer}>
          <FormInput
            label="Kitchens"
            value={formData.kitchens?.toString() || ""}
            onChangeText={(val: string) => handleChange("kitchens", val)}
            keyboardType="numeric"
            theme={currentTheme}
          />
          <FormInput
            label="Living Rooms"
            value={formData.livingRooms?.toString() || ""}
            onChangeText={(val: string) => handleChange("livingRooms", val)}
            keyboardType="numeric"
            theme={currentTheme}
          />
        </View>
        <Text
          style={[styles.subsectionTitle, { color: currentTheme.secondary }]}
        >
          Property Features
        </Text>
        <View style={styles.toggleGroup}>
          {[
            { key: "furnished", label: "Furnished" },
            { key: "utilitiesIncluded", label: "Utilities Included" },
            { key: "petsAllowed", label: "Pets Allowed" },
          ].map(({ key, label }) => (
            <TouchableOpacity
              key={key}
              style={[
                styles.toggleBtn,
                {
                  backgroundColor: !!formData[key]
                    ? currentTheme.primary
                    : currentTheme.background,
                  borderColor: currentTheme.border,
                },
              ]}
              onPress={() => handleChange(key, !formData[key])}
            >
              <Text
                style={{
                  color: !!formData[key] ? "#fff" : currentTheme.text,
                  fontWeight: "600",
                }}
              >
                {label}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </Section>

      <Section title="Financial Information">
        <FormInput
          label="Rent Price"
          value={formData.rentPrice?.toString() || ""}
          onChangeText={(val: string) => handleChange("rentPrice", val)}
          keyboardType="numeric"
          error={errors.rentPrice}
          theme={currentTheme}
        />
        <FormInput
          label="Security Deposit"
          value={formData.securityDeposit?.toString() || ""}
          onChangeText={(val: string) => handleChange("securityDeposit", val)}
          keyboardType="numeric"
          theme={currentTheme}
        />
        <FormInput
          label="Maintenance Charges"
          value={formData.maintenanceCharges?.toString() || ""}
          onChangeText={(val: string) =>
            handleChange("maintenanceCharges", val)
          }
          keyboardType="numeric"
          theme={currentTheme}
        />
      </Section>

      <Section title="Amenities">
        <View style={styles.toggleGroup}>
          {[
            { key: "electricity", label: "Electricity" },
            { key: "water", label: "Water" },
            { key: "gas", label: "Gas" },
            { key: "internet", label: "Internet" },
            { key: "parking", label: "Parking" },
            { key: "security", label: "Security" },
            { key: "lift", label: "Lift" },
          ].map(({ key, label }) => (
            <TouchableOpacity
              key={key}
              style={[
                styles.toggleBtn,
                {
                  backgroundColor: formData.amenities?.includes(key)
                    ? currentTheme.primary
                    : currentTheme.background,
                  borderColor: currentTheme.border,
                },
              ]}
              onPress={() => {
                const amenities = formData.amenities || [];
                handleChange(
                  "amenities",
                  amenities.includes(key)
                    ? amenities.filter((a: string) => a !== key)
                    : [...amenities, key]
                );
              }}
            >
              <Text
                style={{
                  color: formData.amenities?.includes(key)
                    ? "#fff"
                    : currentTheme.text,
                  fontWeight: "600",
                }}
              >
                {label}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </Section>

      <Section title="Media & Location">
        <View style={{ flexDirection: "row", gap: 10 }}>
          <TouchableOpacity
            style={[
              styles.uploadBtn,
              { borderColor: currentTheme.primary, flex: 1 },
            ]}
            onPress={() => pickMedia("photo")}
            disabled={mediaLoading === "photo"}
          >
            {mediaLoading === "photo" ? (
              <ActivityIndicator color={currentTheme.primary} />
            ) : (
              <>
                <MaterialCommunityIcons
                  name="image-plus"
                  size={24}
                  color={currentTheme.primary}
                />
                <Text
                  style={[styles.uploadText, { color: currentTheme.primary }]}
                >
                  Add Photos
                </Text>
              </>
            )}
          </TouchableOpacity>
          <TouchableOpacity
            style={[
              styles.uploadBtn,
              { borderColor: currentTheme.primary, flex: 1 },
            ]}
            onPress={() => pickMedia("video")}
            disabled={mediaLoading === "video"}
          >
            {mediaLoading === "video" ? (
              <ActivityIndicator color={currentTheme.primary} />
            ) : (
              <>
                <MaterialCommunityIcons
                  name="video-plus"
                  size={24}
                  color={currentTheme.primary}
                />
                <Text
                  style={[styles.uploadText, { color: currentTheme.primary }]}
                >
                  Add Videos
                </Text>
              </>
            )}
          </TouchableOpacity>
        </View>
        {formData.images?.length > 0 && (
          <View style={styles.imageGallery}>
            {formData.images.map((img: any, idx: number) => (
              <Text
                key={idx}
                style={[styles.imageName, { color: currentTheme.secondary }]}
              >
                <MaterialCommunityIcons name="image" size={16} />{" "}
                {img.name || `Photo ${idx + 1}`}
              </Text>
            ))}
          </View>
        )}
        {formData.videos?.length > 0 && (
          <View style={styles.imageGallery}>
            {formData.videos.map((vid: any, idx: number) => (
              <Text
                key={idx}
                style={[styles.imageName, { color: currentTheme.secondary }]}
              >
                <MaterialCommunityIcons name="video" size={16} />{" "}
                {vid.name || `Video ${idx + 1}`}
              </Text>
            ))}
          </View>
        )}
        <Text
          style={[styles.subsectionTitle, { color: currentTheme.secondary }]}
        >
          Property Location
        </Text>
        {locationLoading && <ActivityIndicator color={currentTheme.primary} />}
        {/* <LocationPicker
          onPick={(lat, lng, address) => {
            setLocationLoading(true);
            handleChange("latitude", lat);
            handleChange("longitude", lng);
            handleChange("address", address);
            setLocationLoading(false);
          }}
        /> */}
        <FormInput
          label="Address"
          placeholder="Full address (Street, locality...)"
          value={formData.address}
          onChangeText={(val: string) => handleChange("address", val)}
          theme={currentTheme}
        />
      </Section>
    </View>
  );
}
